# -*- coding: utf-8 -*-
"""Estatistica.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QX21yZMowuFi3BG07MbBWz5f4E8EPXfS
"""

print("Primeira Questão:")


classes_1 = [(300, 400), (400, 500), (500, 600), (600, 700), (700, 800), (800, 900), (900, 1000), (1000, 1100), (1100, 1200)]
frequencias_1 = [14, 46, 58, 76, 68, 62, 48, 22, 6]


pontos_medios_1 = [(classe[0] + classe[1]) / 2 for classe in classes_1]


soma_frequencia_1 = sum(frequencias_1)
soma_ponderada_1 = sum([pontos_medios_1[i] * frequencias_1[i] for i in range(len(frequencias_1))])
media_1 = soma_ponderada_1 / soma_frequencia_1


moda_1 = pontos_medios_1[frequencias_1.index(max(frequencias_1))]


frequencia_acumulada_1 = 0
mediana_classe_1 = None
meio_1 = soma_frequencia_1 / 2


for i, f in enumerate(frequencias_1):
    frequencia_acumulada_1 += f
    if frequencia_acumulada_1 >= meio_1:
        mediana_classe_1 = i
        break


limite_inferior_1 = classes_1[mediana_classe_1][0]
frequencia_classe_1 = frequencias_1[mediana_classe_1]
frequencia_acumulada_antes_1 = sum(frequencias_1[:mediana_classe_1])
amplitude_classe_1 = classes_1[mediana_classe_1][1] - classes_1[mediana_classe_1][0]


mediana_1 = limite_inferior_1 + ((meio_1 - frequencia_acumulada_antes_1) / frequencia_classe_1) * amplitude_classe_1


soma_variancia_1 = sum([frequencias_1[i] * ((pontos_medios_1[i] - media_1) ** 2) for i in range(len(frequencias_1))])
variancia_1 = soma_variancia_1 / soma_frequencia_1
desvio_padrao_1 = variancia_1 ** 0.5


def encontrar_percentil(frequencias, classes, percentual):
    posicao = percentual * sum(frequencias) / 100
    acumulada = 0
    for i, f in enumerate(frequencias):
        acumulada += f
        if acumulada >= posicao:
            limite_inferior = classes[i][0]
            frequencia_classe = frequencias[i]
            acumulada_antes = sum(frequencias[:i])
            amplitude_classe = classes[i][1] - classes[i][0]
            return limite_inferior + ((posicao - acumulada_antes) / frequencia_classe) * amplitude_classe


q1_1 = encontrar_percentil(frequencias_1, classes_1, 25)
d3_1 = encontrar_percentil(frequencias_1, classes_1, 30)
d7_1 = encontrar_percentil(frequencias_1, classes_1, 70)
p15_1 = encontrar_percentil(frequencias_1, classes_1, 15)
p90_1 = encontrar_percentil(frequencias_1, classes_1, 90)


print("Média:", media_1)
print("Moda:", moda_1)
print("Mediana:", mediana_1)
print("Desvio Padrão:", desvio_padrao_1)
print("Q1 (25%):", q1_1)
print("D3 (30%):", d3_1)
print("D7 (70%):", d7_1)
print("P15 (15%):", p15_1)
print("P90 (90%):", p90_1)


import matplotlib.pyplot as plt


classes_labels_1 = ["300-400", "400-500", "500-600", "600-700", "700-800", "800-900", "900-1000", "1000-1100", "1100-1200"]
plt.figure(figsize=(10, 6))
plt.bar(classes_labels_1, frequencias_1)
plt.xlabel("Áreas (m²)")
plt.ylabel("Nº de Lotes")
plt.title("Distribuição de Frequência das Áreas de Lotes (Primeira Questão)")
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()


print("\nSegunda Questão:")


valores_2 = [61, 65, 43, 53, 55, 51, 58, 55, 59, 56, 52, 53, 63, 49, 68, 51, 50, 67, 62, 64,
             53, 56, 64, 54, 61, 64, 53, 54, 55, 55, 48, 50, 57, 41, 54, 71, 57, 53, 46, 48,
             55, 46, 57, 48, 63, 49, 55, 52, 52, 51]


limite_inferior_2 = min(valores_2)
limite_superior_2 = max(valores_2)
amplitude_classe_2 = 5


classes_2 = []
frequencias_2 = []


atual = limite_inferior_2
while atual < limite_superior_2:
    proximo = atual + amplitude_classe_2
    classes_2.append((atual, proximo))
    frequencias_2.append(sum(1 for x in valores_2 if atual <= x < proximo))
    atual = proximo


pontos_medios_2 = [(classe[0] + classe[1]) / 2 for classe in classes_2]


soma_frequencia_2 = sum(frequencias_2)
soma_ponderada_2 = sum([pontos_medios_2[i] * frequencias_2[i] for i in range(len(frequencias_2))])
media_2 = soma_ponderada_2 / soma_frequencia_2


moda_2 = pontos_medios_2[frequencias_2.index(max(frequencias_2))]


frequencia_acumulada_2 = 0
mediana_classe_2 = None
meio_2 = soma_frequencia_2 / 2


for i, f in enumerate(frequencias_2):
    frequencia_acumulada_2 += f
    if frequencia_acumulada_2 >= meio_2:
        mediana_classe_2 = i
        break


limite_inferior_2 = classes_2[mediana_classe_2][0]
frequencia_classe_2 = frequencias_2[mediana_classe_2]
frequencia_acumulada_antes_2 = sum(frequencias_2[:mediana_classe_2])
amplitude_classe_2 = classes_2[mediana_classe_2][1] - classes_2[mediana_classe_2][0]


mediana_2 = limite_inferior_2 + ((meio_2 - frequencia_acumulada_antes_2) / frequencia_classe_2) * amplitude_classe_2


soma_variancia_2 = sum([frequencias_2[i] * ((pontos_medios_2[i] - media_2) ** 2) for i in range(len(frequencias_2))])
variancia_2 = soma_variancia_2 / soma_frequencia_2
desvio_padrao_2 = variancia_2 ** 0.5


q1_2 = encontrar_percentil(frequencias_2, classes_2, 25)
d3_2 = encontrar_percentil(frequencias_2, classes_2, 30)
d7_2 = encontrar_percentil(frequencias_2, classes_2, 70)
p15_2 = encontrar_percentil(frequencias_2, classes_2, 15)
p90_2 = encontrar_percentil(frequencias_2, classes_2, 90)


print(f"Média: {media_2:.2f}")
print(f"Moda: {moda_2:.2f}")
print(f"Mediana: {mediana_2:.2f}")
print(f"Desvio Padrão: {desvio_padrao_2:.2f}")